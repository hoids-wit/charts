{{- range .Values.apps }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .name }}-deployment
  labels:
    app: {{ .name }}-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .name }}-app
  template:
    metadata:
      labels:
        app: {{ .name }}-app
    spec:
      {{- if or (.volumes) (.secretVolumes) }}
      volumes: 
      {{- range .volumes }}
        - name: {{ .name }}
          persistentVolumeClaim:
            claimName: {{ .pvcName}}
      {{- end }}
      {{- if .secretVolumes }}
      {{- range .secretVolumes }}
        - name: "{{ .name}}"
          secret:
            secretName: "{{ .secretName }}"
      {{- end }}
      {{- end }}
      {{- end }}
      {{- if .usb }}
      {{- range .usb }}
        - name: "{{.name}}"
          hostPath:
            path: "{{.mountPath}}"
      {{- end }}
      {{- end }}
      containers:
        - name: {{ .name }}-app
          image: {{ .image }}
          {{- if or (.volumes) (.secretVolumes) }}
          volumeMounts:
          {{- range .volumes }}
            - name: "{{ .name }}"
              mountPath: "{{ .mountPath }}"
              {{- if .subPath}}
              subPath: "{{ .subPath }}"
              {{- end }}
          {{- end }}
          {{- if .secretVolumes }}
          {{- range .secretVolumes }}
            - name: "{{ .name }}"
              mountPath: "{{ .mountPath }}"
          {{- end }}
          {{- end }}
          {{- if .usb }}
          {{- range .usb }}
            - name: "{{.name}}"
              mountPath: "{{.mountPath}}"
          {{- end }}
          {{- end }}
          {{- end }}
          {{- if .commands }}
          args: {{ toYaml .commands | nindent 12 }}
          {{- end }}
          {{- if .args }}
          args: {{ toYaml .args | nindent 12 }}
          {{- end }}
          {{- if .env }}
          env:
          {{- range .env }}
            - name: "{{ .name }}"
              value: "{{ .value }}"
          {{- end }}
          {{- end }}
          {{- if .secret }}
          {{- if .secret.enable }}
          envFrom:
            - secretRef:
                name: {{ .secret.name }}
          {{- end }}
          {{- end }}
          {{- if .service }}
          {{- if .service.ports }}
          ports:
          {{- range .service.ports }}
            - name: {{ .portName }}
              containerPort: {{ .targetPort }}
          {{- end }}
          {{- end }}
          {{- end }}
          
          {{- if .readinessProbe }}
          readinessProbe: {{ toYaml .readinessProbe | nindent 12 }}
          {{- end }}
---
{{- if .ingress }}
{{- if .ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ .name }}-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    cert-manager.io/issuer: lets-encrypt
    {{ range .ingress.annotations }}
      {{- .}}
    {{- end }}

spec:
  template:
    metadata:
      labels:
        app: {{ .name }}-service
  tls:
  - hosts:
    {{- range .ingress.hosts }}
    - {{ .hostname }}
    {{- end}}
    secretName: {{ .name }}-ingress-tls
  rules:
  # add a rule for each host
    {{- range .ingress.hosts }}
    - host: {{ .hostname }}
      http:
        paths:
          {{- range .ports }}
          - path: {{ .path }}
            pathType: Prefix
            backend:
              service:
                name: {{ .serviceName }}-service
                port:
                  name: {{ .portName }}
          {{- end }}
    {{- end }}                  
{{- end }}                  
{{- end }}
---
{{- if .service }}
{{- if .service.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .name}}-service
spec:
  selector:
    app: {{ .name}}-app
  template:
    metadata:
      labels:
        app: {{ .name}}-app
  ports:
    {{- range .service.ports }}
    - name: {{ .portName }}
      port: {{ .port }}
      targetPort: {{ .targetPort }}
    {{- end }}
  type: ClusterIP
  {{- end }}
{{- end }}
---
{{- if .secretVolumes }}
{{- range .secretVolumes }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .secretName }}
type: Opaque
stringData: 
  {{ .secretKey }}: "{{ .secretValue }}"
{{- end }}
{{- end }}
---
{{- end }}